/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        
        if(intervals.size() <= 1) return intervals;
        
        List<Interval> answer = new ArrayList<Interval>();
        
        //sort the interval
        intervals.sort((i1,i2) -> Integer.compare(i1.start, i2.start));
        int start = intervals.get(0).start;
        int end = intervals.get(0).end;
        
        //Iterate and add answers
        for(int i = 0; i < intervals.size(); i++){
            if(intervals.get(i).start <= end){
                end = Math.max(end, intervals.get(i).end);
            }
            else{
                answer.add(new Interval(start,end));
                start = intervals.get(i).start;
                end = intervals.get(i).end;
            }
        }
        
        answer.add(new Interval(start,end));
        
        return answer;
    }
}

